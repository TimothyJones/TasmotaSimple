{"version":3,"sources":["config.js","api.js","ToggleButton.js","App.js","serviceWorker.js","index.js"],"names":["devices","displayName","host","app","title","apiGet","hostAndPort","command","url","options","method","headers","Accept","fetch","then","response","ok","json","console","log","error","statusText","JSON","stringify","getPowerState","POWER","Button","styled","button","isOn","ToggleButton","useState","setIsOn","hasLoaded","setHasLoaded","device","toggle","cmd","isPowerOn","useEffect","cancel","wasItOn","onClick","App","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAAaA,G,YAAU,CACrB,CAAEC,YAAa,mBAAoBC,KAAM,gBACzC,CAAED,YAAa,OAAQC,KAAM,kBAC7B,CAAED,YAAa,oBAAqBC,KAAM,oBAC1C,CAAED,YAAa,oBAAqBC,KAAM,oBAC1C,CAAED,YAAa,MAAOC,KAAM,mBAGjBC,EAAM,CACjBC,MAAO,sB,8BCIHC,EAAS,SAACC,EAAaC,GAAd,OAXIC,EAYP,UAAD,OAAWF,EAAX,oBAAkCC,GAZrBE,EAYgC,CACpDC,OAAQ,MACRC,QAAS,CACPC,OAAQ,qBAdZC,IAAML,EAAKC,GAASK,MAAK,SAAAC,GACvB,OAAIA,EAASC,GACJD,EAASE,QAElBC,QAAQC,IAAI,iBAAkBJ,GACvB,CACLK,MAAOL,EAASM,WAAaC,KAAKC,UAAUR,EAASE,aAPzC,IAACT,EAAKC,GAmBlBe,EAAgB,SAAC,GAAD,MAAyB,OAAzB,EAAGC,O,2PCjBzB,IAAMC,E,KAASC,EAAOC,OAAV,KACI,qBAAGC,KAAmB,QAAU,WAE1B,qBAAGA,KAAmB,QAAU,WA2CvCC,EAlCM,SAAC,GAA2B,IDOlCxB,ECPSJ,EAAwB,EAAxBA,KAAMD,EAAkB,EAAlBA,YAAkB,EACtB8B,oBAAS,GADa,mBACvCF,EADuC,KACjCG,EADiC,OAEZD,oBAAS,GAFG,mBAEvCE,EAFuC,KAE5BC,EAF4B,KAIxCC,GDGO7B,ECHMJ,EDGU,CAC7BkC,OAAQ,SAAAC,GAAG,OAAIhC,EAAOC,EAAa,gBAAgBQ,KAAKU,IACxDc,UAAW,SAAAD,GAAG,OAAIhC,EAAOC,EAAa,SAASQ,KAAKU,MCWpD,OAdAe,qBAAU,WACR,IAAIC,GAAS,EAQb,OAPAL,EAAOG,YAAYxB,MAAK,SAAA2B,GACjBD,IACHR,EAAQS,GACRP,GAAa,OAIV,WACLM,GAAS,KAEV,CAACX,EAAMI,EAAWD,EAASE,IAG5B,kBAACR,EAAD,CACEG,KAAMA,EACNI,UAAWA,EACXS,QAAS,WACPV,GAASH,GACTM,EAAOC,SAAStB,MAAK,SAAA2B,GAAO,OAAIT,EAAQS,QAGzCR,EAAYhC,EAAc,YC5BlB0C,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAczC,EAAIC,OACnCJ,EAAQ6C,KAAI,gBAAG5C,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,KAAhB,OACX,kBAAC,EAAD,CAAcD,YAAaA,EAAaC,KAAMA,EAAM4C,IAAK5C,SCC7C6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.90a10bd4.chunk.js","sourcesContent":["export const devices = [\n  { displayName: 'Christmas Lights', host: 'tv.fritz.box' },\n  { displayName: 'Lamp', host: 'lamp.fritz.box' },\n  { displayName: 'Shower towel rail', host: 'shower.fritz.box' },\n  { displayName: 'Toilet towel rail', host: 'toilet.fritz.box' },\n  { displayName: 'Spa', host: 'spa.fritz.box' }\n];\n\nexport const app = {\n  title: 'Jones Family House'\n};\n","import fetch from 'cross-fetch';\n\nconst fetchWith = (url, options) =>\n  fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    console.log('Error response', response);\n    return {\n      error: response.statusText + JSON.stringify(response.json())\n    };\n  });\n\nconst apiGet = (hostAndPort, command) =>\n  fetchWith(`http://${hostAndPort}/cm?cmnd=${command}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json'\n    }\n  });\n\nconst getPowerState = ({ POWER }) => POWER === 'ON';\n\nexport default hostAndPort => ({\n  toggle: cmd => apiGet(hostAndPort, 'POWER TOGGLE').then(getPowerState),\n  isPowerOn: cmd => apiGet(hostAndPort, 'Power').then(getPowerState)\n});\n","import React, { useEffect, useState } from 'react';\nimport api from './api';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  background: ${({ isOn }) => (isOn ? 'green' : 'black')};\n  border-radius: 3px;\n  border: 2px solid ${({ isOn }) => (isOn ? 'green' : 'black')};\n  color: #fff;\n  margin: 1em;\n  padding: 0.25em 1em;\n  font-size: 1.2em;\n  display: block;\n  width: 90%;\n`;\n\nconst ToggleButton = ({ host, displayName }) => {\n  const [isOn, setIsOn] = useState(false);\n  const [hasLoaded, setHasLoaded] = useState(false);\n\n  const device = api(host);\n\n  useEffect(() => {\n    let cancel = false;\n    device.isPowerOn().then(wasItOn => {\n      if (!cancel) {\n        setIsOn(wasItOn);\n        setHasLoaded(true);\n      }\n    });\n\n    return () => {\n      cancel = true;\n    };\n  }, [isOn, hasLoaded, setIsOn, setHasLoaded]);\n\n  return (\n    <Button\n      isOn={isOn}\n      hasLoaded={hasLoaded}\n      onClick={() => {\n        setIsOn(!isOn); // Assume it worked so the UI feels more responsive\n        device.toggle().then(wasItOn => setIsOn(wasItOn));\n      }}\n    >\n      {hasLoaded ? displayName : 'loading'}\n    </Button>\n  );\n};\n\nexport default ToggleButton;\n","import React from 'react';\nimport './App.css';\nimport { devices, app } from './config';\n\nimport ToggleButton from './ToggleButton';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-Header\">{app.title}</header>\n      {devices.map(({ displayName, host }) => (\n        <ToggleButton displayName={displayName} host={host} key={host} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}