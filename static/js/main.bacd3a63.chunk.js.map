{"version":3,"sources":["config.js","api.js","ToggleButton.js","App.js","serviceWorker.js","index.js"],"names":["devices","displayName","host","powerId","app","title","pollIntervalMillis","apiGet","hostAndPort","command","url","options","method","headers","Accept","fetch","then","response","ok","json","console","log","error","statusText","JSON","stringify","marshalPowerId","getPowerState","POWER","toggle","isPowerOn","Button","styled","button","isOn","SettingsButton","a","ToggleButton","useState","setIsOn","hasLoaded","setHasLoaded","useEffect","cancel","poll","api","wasItOn","repoll","setInterval","clearTimeout","device","onClick","href","role","aria-label","ButtonWrapper","div","App","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAAaA,G,MAAU,CACrB,CAAEC,YAAa,UAAWC,KAAM,oBAAqBC,QAAS,GAC9D,CAAEF,YAAa,OAAQC,KAAM,oBAAqBC,QAAS,GAC3D,CAAEF,YAAa,OAAQC,KAAM,oBAAqBC,QAAS,GAC3D,CAAEF,YAAa,SAAUC,KAAM,oBAC/B,CAAED,YAAa,QAASC,KAAM,mBAC9B,CAAED,YAAa,KAAMC,KAAM,gBAC3B,CAAED,YAAa,OAAQC,KAAM,kBAC7B,CAAED,YAAa,UAAWC,KAAM,qBAChC,CAAED,YAAa,oBAAqBC,KAAM,oBAC1C,CAAED,YAAa,oBAAqBC,KAAM,oBAC1C,CAAED,YAAa,MAAOC,KAAM,mBAGjBE,EAAM,CACjBC,MAAO,cACPC,mBAAoB,K,8BCHhBC,EAAS,SAACC,EAAaC,GAAd,OAXIC,EAYP,UAAD,OAAWF,EAAX,oBAAkCC,GAZrBE,EAYgC,CACpDC,OAAQ,MACRC,QAAS,CACPC,OAAQ,qBAdZC,IAAML,EAAKC,GAASK,MAAK,SAAAC,GACvB,OAAIA,EAASC,GACJD,EAASE,QAElBC,QAAQC,IAAI,iBAAkBJ,GACvB,CACLK,MAAOL,EAASM,WAAaC,KAAKC,UAAUR,EAASE,aAPzC,IAACT,EAAKC,GAmBlBe,EAAiB,SAAAvB,GAAO,qBAAYA,IAEpCwB,EAAgB,SAACV,EAAUd,GAAX,MACD,OAAnBc,EAASW,OAAwD,OAAtCX,EAASS,EAAevB,KAEtC,WAACK,GAAD,IAAcL,EAAd,uDAAwB,EAAxB,MAA+B,CAC5C0B,OAAQ,kBACNtB,EAAOC,EAAD,UAAiBkB,EAAevB,GAAhC,YAAmDa,MAAK,SAAAC,GAAQ,OACpEU,EAAcV,EAAUd,OAE5B2B,UAAW,kBACTvB,EAAOC,EAAakB,EAAevB,IAAUa,MAAK,SAAAC,GAAQ,OACxDU,EAAcV,EAAUd,S,ykBC5B9B,IAAM4B,EAASC,IAAOC,OAAV,KACI,qBAAGC,KAAmB,QAAU,WAE1B,qBAAGA,KAAmB,QAAU,WAQhDC,EAAiBH,IAAOI,EAAV,KAgELC,EA9CM,SAAC,GAAoC,IAAlCnC,EAAiC,EAAjCA,KAAMD,EAA2B,EAA3BA,YAAaE,EAAc,EAAdA,QAAc,EAC/BmC,oBAAS,GADsB,mBAChDJ,EADgD,KAC1CK,EAD0C,OAErBD,oBAAS,GAFY,mBAEhDE,EAFgD,KAErCC,EAFqC,KAIvDC,qBAAU,WACR,IAAIC,GAAS,EACPC,EAAO,kBACXC,EAAI3C,EAAMC,GACP2B,YACAd,MAAK,SAAA8B,GACCH,IACHJ,EAAQO,GACRL,GAAa,QAGrBG,IAEA,IAAMG,EAASC,YAAYJ,EAAMxC,EAAIE,oBACrC,OAAO,WACLqC,GAAS,EACTM,aAAaF,MAEd,CAACb,EAAMM,EAAWD,EAASE,EAAcvC,EAAMC,IAElD,IAAM+C,EAASL,EAAI3C,EAAMC,GACzB,OACE,oCACE,kBAAC4B,EAAD,CACEG,KAAMA,EACNM,UAAWA,EACXW,QAAS,WACPZ,GAASL,GACTgB,EAAOrB,SAASb,MAAK,SAAA8B,GAAO,OAAIP,EAAQO,QAGzCN,EAAYvC,EAAcA,EAAc,YAE3C,kBAACkC,EAAD,CAAgBiB,KAAI,iBAAYlD,IAC9B,0BAAMmD,KAAK,MAAMC,aAAW,QAA5B,mB,sLClER,IAAMC,EAAgBvB,IAAOwB,IAAV,KA0BJC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAActD,EAAIC,OACpC,kBAACkD,EAAD,KACGvD,EAAQ2D,KAAI,gBAAG1D,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,QAAtB,OACX,kBAAC,EAAD,CACEF,YAAaA,EACbC,KAAMA,EACNC,QAASA,EACTyD,IAAG,UAAK1D,GAAL,OAAYC,WCZP0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAAAyD,GACjCA,EAAaC,kB","file":"static/js/main.bacd3a63.chunk.js","sourcesContent":["export const devices = [\n  { displayName: 'Blanket', host: 'bedroom.fritz.box', powerId: 1 },\n  { displayName: 'Heat', host: 'bedroom.fritz.box', powerId: 2 },\n  { displayName: 'Cool', host: 'bedroom.fritz.box', powerId: 3 },\n  { displayName: 'Yamaha', host: 'Yamaha.fritz.box' },\n  { displayName: 'Spare', host: 'spare.fritz.box' },\n  { displayName: 'TV', host: 'tv.fritz.box' },\n  { displayName: 'Lamp', host: 'lamp.fritz.box' },\n  { displayName: 'NodeMCU', host: 'nodemcu.fritz.box' },\n  { displayName: 'Toilet towel rail', host: 'toilet.fritz.box' },\n  { displayName: 'Shower towel rail', host: 'shower.fritz.box' },\n  { displayName: 'Spa', host: 'spa.fritz.box' }\n];\n\nexport const app = {\n  title: 'Jones House',\n  pollIntervalMillis: 5000\n};\n","import fetch from 'cross-fetch';\n\nconst fetchWith = (url, options) =>\n  fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    console.log('Error response', response);\n    return {\n      error: response.statusText + JSON.stringify(response.json())\n    };\n  });\n\nconst apiGet = (hostAndPort, command) =>\n  fetchWith(`http://${hostAndPort}/cm?cmnd=${command}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json'\n    }\n  });\n\nconst marshalPowerId = powerId => `POWER${powerId}`;\n\nconst getPowerState = (response, powerId) =>\n  response.POWER === 'ON' || response[marshalPowerId(powerId)] === 'ON';\n\nexport default (hostAndPort, powerId = 1) => ({\n  toggle: () =>\n    apiGet(hostAndPort, `${marshalPowerId(powerId)} TOGGLE`).then(response =>\n      getPowerState(response, powerId)\n    ),\n  isPowerOn: () =>\n    apiGet(hostAndPort, marshalPowerId(powerId)).then(response =>\n      getPowerState(response, powerId)\n    )\n});\n","import React, { useEffect, useState } from 'react';\nimport api from './api';\nimport styled from 'styled-components';\nimport { app } from './config';\n\nconst Button = styled.button`\n  background: ${({ isOn }) => (isOn ? 'green' : 'black')};\n  border-radius: 3px;\n  border: 2px solid ${({ isOn }) => (isOn ? 'green' : 'black')};\n  color: #fff;\n  padding: 0.25em 1em;\n  font-size: 1.2em;\n  display: block;\n  width: 100%;\n`;\n\nconst SettingsButton = styled.a`\n  background: grey;\n  border-radius: 3px;\n  padding: 0.25em 1em;\n  font-size: 1.2em;\n  border: 2px grey;\n  display: block;\n  text-align: center;\n  color: #000;\n  text-decoration: none;\n  width: 100%;\n\n  &:visited {\n    text-decoration: none;\n    color: #000;\n  }\n`;\n\nconst ToggleButton = ({ host, displayName, powerId }) => {\n  const [isOn, setIsOn] = useState(false);\n  const [hasLoaded, setHasLoaded] = useState(false);\n\n  useEffect(() => {\n    let cancel = false;\n    const poll = () =>\n      api(host, powerId)\n        .isPowerOn()\n        .then(wasItOn => {\n          if (!cancel) {\n            setIsOn(wasItOn);\n            setHasLoaded(true);\n          }\n        });\n    poll();\n\n    const repoll = setInterval(poll, app.pollIntervalMillis);\n    return () => {\n      cancel = true;\n      clearTimeout(repoll);\n    };\n  }, [isOn, hasLoaded, setIsOn, setHasLoaded, host, powerId]);\n\n  const device = api(host, powerId);\n  return (\n    <>\n      <Button\n        isOn={isOn}\n        hasLoaded={hasLoaded}\n        onClick={() => {\n          setIsOn(!isOn); // Assume it worked so the UI feels more responsive\n          device.toggle().then(wasItOn => setIsOn(wasItOn));\n        }}\n      >\n        {hasLoaded ? displayName : displayName + ':loading'}\n      </Button>\n      <SettingsButton href={`http://${host}`}>\n        <span role=\"img\" aria-label=\"Gear\">\n          ⚙️\n        </span>\n      </SettingsButton>\n    </>\n  );\n};\n\nexport default ToggleButton;\n","import React from 'react';\nimport './App.css';\nimport { devices, app } from './config';\nimport styled from 'styled-components';\nimport ToggleButton from './ToggleButton';\n\nconst ButtonWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 0.9fr 1em;\n  grid-gap: 0.5em;\n  width: 85vw;\n  max-width: 85vw;\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-Header\">{app.title}</header>\n      <ButtonWrapper>\n        {devices.map(({ displayName, host, powerId }) => (\n          <ToggleButton\n            displayName={displayName}\n            host={host}\n            powerId={powerId}\n            key={`${host}${powerId}`}\n          />\n        ))}\n      </ButtonWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}